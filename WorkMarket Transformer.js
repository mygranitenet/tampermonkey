// ==UserScript==
// @name         WorkMarket Transformer
// @namespace    http://tampermonkey.net/
// @version      19.2
// @description  Fetches assignment data directly from the API for a faster, more reliable, and powerful table with advanced filtering.
// @author       ilakskill
// @match        https://www.workmarket.com/assignments*
// @match        https://www.workmarket.com/workorders*
// @grant        none
// @run-at       document-idle
// ==/UserScript==

(async function() {
    'use strict';

    class WorkMarketTransformer {
        config = {
            SCRIPT_PREFIX: '[WM TRANSFORMER V19.2]',
            DEBOUNCE_DELAY: 400,
            API_ENDPOINT: 'assignments/fetch_dashboard_results',
            CSS: `
                .custom-sortable-table { width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 0.80em; box-shadow: 0 0 10px rgba(0,0,0,0.1); table-layout: auto; }
                .custom-sortable-table thead tr { background-color: #4A5568; color: #ffffff; text-align: left; }
                .custom-sortable-table th, .custom-sortable-table td { padding: 5px 6px; border: 1px solid #ddd; vertical-align: top; white-space: nowrap; }
                .custom-sortable-table td { white-space: normal; }
                .custom-sortable-table tbody tr:nth-of-type(even) { background-color: #f9f9f9; }
                .custom-sortable-table tbody tr:hover { background-color: #e9e9e9; }
                .custom-sortable-table th[data-column] { cursor: pointer; position: relative; }
                .custom-sortable-table th[data-column]:hover { background-color: #2D3748; }
                .custom-sortable-table th .sort-arrow { font-size: 0.8em; margin-left: 3px; display: inline-block; width: 1em; }
                .custom-sortable-table th .sort-arrow.asc::after { content: " \\25B2"; }
                .custom-sortable-table th .sort-arrow.desc::after { content: " \\25BC"; }
                .custom-sortable-table td a { color: #2b6cb0; text-decoration: none; }
                .custom-sortable-table td a:hover { text-decoration: underline; }
                .custom-sortable-table .col-assigned-tech { font-weight: bold; }
                .custom-sortable-table .loading-workers { font-style: italic; color: #777; }
                #custom-table-filter-row input, #custom-table-filter-row select { width: 95%; box-sizing: border-box; font-size: 0.95em; padding: 2px; }
                #custom-table-filter-row th { padding: 4px; }
                #custom-table-filter-row input { color: #000 !important; }
                .applicant-list { list-style: none; margin: 0; padding: 0; font-size: 0.95em; }
                .applicant-item { padding: 4px 0; border-bottom: 1px solid #eee; }
                .applicant-item:last-child { border-bottom: none; }
                .applicant-name { font-weight: bold; cursor: pointer; display: block; }
                .applicant-id, .applicant-phone { color: #666; font-size: 0.9em; display: block; }
                .applicant-details { color: #333; display: block; margin-top: 3px; }
                .cost-value { font-weight: bold; color: #dc3545; }
                .cost-na { font-weight: bold; color: #28a745; }
                .applicant-status { font-weight: bold; color: #17a2b8; margin-left: 10px; }
                .wm-transformer-overlay { position: fixed; top: 20px; left: 1%; width: 98%; height: calc(100vh - 40px); background-color: #f8f9fa; border: 1px solid #ccc; box-shadow: 0 5px 15px rgba(0,0,0,0.2); z-index: 9998; display: none; flex-direction: column; border-radius: 8px; overflow: hidden; box-sizing: border-box; }
                .wm-transformer-overlay.minimized { height: 40px !important; width: 280px !important; bottom: 0; top: auto; left: 20px; }
                .wm-transformer-overlay.minimized .overlay-content, .wm-transformer-overlay.minimized .overlay-resize-handle { display: none; }
                .wm-transformer-overlay.maximized-true { top: 5px !important; left: 5px !important; width: calc(100vw - 10px) !important; height: calc(100vh - 10px) !important; border-radius: 0; }
                .overlay-header { background-color: #343a40; color: white; padding: 8px 12px; cursor: move; display: flex; justify-content: space-between; align-items: center; height: 40px; box-sizing: border-box; }
                .overlay-controls button { background: none; border: none; color: white; font-size: 14px; margin-left: 8px; cursor: pointer; padding: 2px 5px; font-weight: bold; }
                .overlay-controls .overlay-icon-btn { font-size: 16px; }
                .overlay-content { padding: 10px; flex-grow: 1; overflow: auto; background-color: white; }
                .overlay-resize-handle { width: 15px; height: 15px; background-color: #ddd; position: absolute; right: 0; bottom: 0; cursor: nwse-resize; }
                /* Other generic modal styles would go here */
            `,
            TABLE_HEADERS: [
                { key: 'title', name: 'Title', type: 'string', sortable: true, filterable: true },
                { key: 'siteName', name: 'Site Name', type: 'string', sortable: true, filterable: true },
                { key: 'graniteTicket', name: 'Ticket #', type: 'string', sortable: true, filterable: true },
                { key: 'assignmentId', name: 'Assign. ID', type: 'string', sortable: true, filterable: true },
                { key: 'descIcon', name: 'ðŸ“„', type: 'control', sortable: false, filterable: false },
                { key: 'status', name: 'Status', type: 'string', sortable: true, filterable: true },
                { key: 'labels', name: 'Labels', type: 'string', sortable: true, filterable: true },
                { key: 'assignedTech', name: 'Assigned Tech', type: 'string', sortable: true, filterable: true, className: 'col-assigned-tech' },
                { key: 'appliedCount', name: '#Apld', type: 'number', sortable: true, filterable: true },
                { key: 'applicantDetailsDisplay', name: 'Top Applicants', type: 'string', sortable: false, filterable: true },
                { key: 'parsedDate', name: 'Date', type: 'date', sortable: true, filterable: true, sortKey: 'timestamp' },
                { key: 'parsedTime', name: 'Time', type: 'string', sortable: true, filterable: true, sortKey: 'timestamp' },
                { key: 'checkbox', name: '', type: 'control', sortable: false, filterable: false },
                { key: 'city', name: 'City', type: 'string', sortable: true, filterable: true },
                { key: 'state', name: 'ST', type: 'string', sortable: true, filterable: true },
                { key: 'zip', name: 'Zip', type: 'string', sortable: true, filterable: true },
                { key: 'price', name: 'Price', type: 'number', sortable: true, filterable: true, sortKey: 'priceNumeric' },
            ],
        };

        fullTableData = []; displayedTableData = []; currentSort = { column: 'timestamp', direction: 'desc' }; currentFilters = {}; currentAssignmentTechsData = {}; currentAssignmentViewDataCache = {}; mainOverlay = null; transformationRunning = false;
        constructor() { this._init(); }
        _init() { console.log(`${this.config.SCRIPT_PREFIX} Initializing...`); this._injectStyles(); this._createUI(); this._proxyFetch(); }
        _injectStyles() { if (document.getElementById('wmTransformerStyles')) return; const styleElement = document.createElement('style'); styleElement.id = 'wmTransformerStyles'; styleElement.textContent = this.config.CSS; document.head.appendChild(styleElement); }
        _createUI() { this._createMainOverlay(); this._createShowButton(); }
        _createMainOverlay() { if (document.getElementById('wmTransformerOverlay')) return; this.mainOverlay = document.createElement('div'); this.mainOverlay.id = 'wmTransformerOverlay'; this.mainOverlay.className = 'wm-transformer-overlay'; this.mainOverlay.innerHTML = `<div class="overlay-header"><span>WorkMarket Enhanced Assignments</span><div class="overlay-controls"><button class="overlay-refresh-btn overlay-icon-btn" title="Refresh Data">ðŸ”„</button><button class="overlay-clear-filters-btn" title="Clear Filters">Clear</button><button class="copy-json-btn" title="Copy as JSON">JSON</button><button class="copy-csv-btn" title="Copy as CSV">CSV</button><button class="download-csv-btn overlay-icon-btn" title="Download CSV">ðŸ“¥</button><button class="overlay-close-btn overlay-icon-btn" title="Hide">X</button></div></div><div class="overlay-content"></div><div class="overlay-resize-handle"></div>`; document.body.appendChild(this.mainOverlay); this.mainOverlay.querySelector('.overlay-refresh-btn').addEventListener('click', () => document.getElementById('btn-search-assignments')?.click()); this.mainOverlay.querySelector('.overlay-clear-filters-btn').addEventListener('click', () => this._clearFilters()); this.mainOverlay.querySelector('.copy-json-btn').addEventListener('click', () => this._copyJsonToClipboard()); this.mainOverlay.querySelector('.copy-csv-btn').addEventListener('click', () => this._copyCsvToClipboard()); this.mainOverlay.querySelector('.download-csv-btn').addEventListener('click', () => this.exportDataToCsv()); this.mainOverlay.querySelector('.overlay-close-btn').addEventListener('click', () => this.mainOverlay.style.display = 'none'); }
        _createShowButton() { if (document.getElementById('wm-transformer-view-btn')) return; const targetArea = document.querySelector('.dashboard-quick-actions'); if (!targetArea) { setTimeout(() => this._createShowButton(), 500); return; } const showBtn = document.createElement('button'); showBtn.id = 'wm-transformer-view-btn'; showBtn.className = 'button -new tooltipped tooltipped-n'; showBtn.setAttribute('aria-label', 'Show Transformer Table View'); showBtn.innerHTML = `<div class="button--content">T-View</div>`; showBtn.onclick = () => { if(this.mainOverlay) this.mainOverlay.style.display = 'flex'; }; targetArea.prepend(showBtn); }
        _proxyFetch() { const originalFetch = window.fetch; window.fetch = async (...args) => { const [url] = args; const response = await originalFetch(...args); if (typeof url === 'string' && url.includes(this.config.API_ENDPOINT)) { console.log(`${this.config.SCRIPT_PREFIX} Intercepted API call:`, url); const clonedResponse = response.clone(); clonedResponse.json().then(data => this._processApiData(data)); } return response; }; }
        async _processApiData(apiData) { if (this.transformationRunning) return; this.transformationRunning = true; console.log(`${this.config.SCRIPT_PREFIX} Processing API data...`); this.mainOverlay.style.display = 'flex'; this.fullTableData = []; this._renderTable(); const assignmentData = apiData?.data || []; this.fullTableData = await Promise.all(assignmentData.map(item => this._parseApiItem(item))); this._applyFiltersAndRedraw(); console.log(`${this.config.SCRIPT_PREFIX} Transformation complete.`); this.transformationRunning = false; }
        _applyFiltersAndRedraw() { this._updateCurrentFilters(); if (Object.keys(this.currentFilters).length === 0) { this.displayedTableData = [...this.fullTableData]; } else { this.displayedTableData = this.fullTableData.filter(item => { return Object.keys(this.currentFilters).every(key => { const filterValue = this.currentFilters[key].toLowerCase(); const itemValue = item[key]; if (itemValue === undefined || itemValue === null) return false; if (key === 'parsedDate' && itemValue) return itemValue === filterValue; return String(itemValue).toLowerCase().includes(filterValue); }); }); } this._sortData(); this._renderTable(); }
        _updateCurrentFilters() { this.currentFilters = {}; document.querySelectorAll('#custom-table-filter-row input').forEach(input => { if (input.value) { this.currentFilters[input.dataset.filterColumn] = input.value; } }); }
        _clearFilters() { this.currentFilters = {}; document.querySelectorAll('#custom-table-filter-row input').forEach(input => input.value = ''); this._applyFiltersAndRedraw(); }
        _sortData() { const { column, direction } = this.currentSort; const header = this.config.TABLE_HEADERS.find(h => h.key === column); if (!header?.sortable) return; const sortKey = header.sortKey || column; const isAsc = direction === 'asc'; this.displayedTableData.sort((a, b) => { let valA = a[sortKey]; let valB = b[sortKey]; if (typeof valA === 'string') valA = valA.toLowerCase(); if (typeof valB === 'string') valB = valB.toLowerCase(); if (valA < valB) return isAsc ? -1 : 1; if (valA > valB) return isAsc ? 1 : -1; return 0; }); }
        _handleSort(columnKey) { if (this.currentSort.column === columnKey) { this.currentSort.direction = this.currentSort.direction === 'asc' ? 'desc' : 'asc'; } else { this.currentSort.column = columnKey; this.currentSort.direction = 'asc'; } this._applyFiltersAndRedraw(); }
        _debounce(func, delay) { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func.apply(this, args), delay); }; }
        _renderTable() { const container = this.mainOverlay.querySelector('.overlay-content'); if (!container) return; const table = document.createElement('table'); table.className = 'custom-sortable-table'; const thead = table.createTHead(); this._renderHeader(thead); this._renderFilterRow(thead); this._renderBody(table.createTBody()); container.innerHTML = ''; container.appendChild(table); this._updateSortIndicators(); this._reapplyFilterValues(); }
        _reapplyFilterValues() { for (const key in this.currentFilters) { const input = this.mainOverlay.querySelector(`#custom-table-filter-row input[data-filter-column="${key}"]`); if (input) { input.value = this.currentFilters[key]; } } }
        _renderHeader(thead) { const row = thead.insertRow(); this.config.TABLE_HEADERS.forEach(h => { const th = document.createElement('th'); if (h.sortable) { th.dataset.column = h.key; th.innerHTML = `${h.name} <span class="sort-arrow"></span>`; th.addEventListener('click', () => this._handleSort(h.key)); } else { th.textContent = h.name; } row.appendChild(th); }); }
        _renderFilterRow(thead) { const row = thead.insertRow(); row.id = 'custom-table-filter-row'; const debouncedFilter = this._debounce(() => this._applyFiltersAndRedraw(), this.config.DEBOUNCE_DELAY); this.config.TABLE_HEADERS.forEach(h => { const th = document.createElement('th'); if (h.filterable) { const input = document.createElement('input'); input.type = h.type === 'date' ? 'date' : 'text'; input.placeholder = 'Filter...'; input.dataset.filterColumn = h.key; input.addEventListener('input', debouncedFilter); th.appendChild(input); } row.appendChild(th); }); }
        _renderBody(tbody) { if (this.fullTableData.length === 0) { const row = tbody.insertRow(); const cell = row.insertCell(); cell.colSpan = this.config.TABLE_HEADERS.length; cell.textContent = "Waiting for assignment data..."; cell.style.textAlign = "center"; cell.style.padding = "20px"; return; } if (this.displayedTableData.length === 0) { const row = tbody.insertRow(); const cell = row.insertCell(); cell.colSpan = this.config.TABLE_HEADERS.length; cell.textContent = "No assignments match filters."; cell.style.textAlign = "center"; cell.style.padding = "20px"; return; } this.displayedTableData.forEach((item, index) => { const row = tbody.insertRow(); this.config.TABLE_HEADERS.forEach(h => { const cell = row.insertCell(); this._renderCell(cell, item, h, index); }); }); }
        _renderCell(cell, item, header, itemIndex) { const value = item[header.key]; switch (header.key) { case 'checkbox': cell.innerHTML = `<input type="checkbox" value="${item.assignmentId}"}>`; break; case 'title': cell.innerHTML = `<a href="/assignments/details/${item.assignmentId}" target="_blank">${value}</a>`; break; case 'descIcon': const icon = document.createElement('span'); icon.innerHTML = header.name; icon.style.cursor = 'pointer'; icon.addEventListener('click', () => this._showAssignmentDetailsModal(itemIndex)); cell.appendChild(icon); break; case 'applicantDetailsDisplay': cell.innerHTML = value || ''; if (cell.innerHTML.includes('Loading')) cell.classList.add('loading-workers'); cell.querySelectorAll('.applicant-name').forEach(link => { link.addEventListener('click', e => { e.preventDefault(); this._showTechDetailsModal(this.currentAssignmentTechsData[e.target.dataset.assignmentId]?.[e.target.dataset.techIndex], e.target.dataset.assignmentId, parseInt(e.target.dataset.techIndex, 10)); }); }); break; default: cell.textContent = value || ''; break; } }
        async _parseApiItem(item) { const data = {}; const dateParts = this._parseFullDateFromMillis(item.scheduled_date_from_in_millis); data.title = item.title; data.siteName = item.location_name; data.graniteTicket = item.custom_fields['Granite Ticket Number'] || ''; data.assignmentId = item.id; data.status = item.status; if (data.status.toLowerCase() === 'confirmed') data.status += ' - Assigned'; data.labels = (item.substatuses || []).map(s => s.description).join(', '); data.assignedTech = item.resource_full_name || ''; data.parsedDate = dateParts.date; data.parsedTime = dateParts.time; data.timestamp = dateParts.timestamp; data.city = item.city; data.state = item.state; data.zip = item.postal_code; data.price = item.price; data.priceNumeric = item.work_amount || 0; data.appliedCount = '...'; data.applicantDetailsDisplay = 'Loading...'; const workerInfo = await this._fetchWorkerData(item.id, data.assignedTech); data.appliedCount = workerInfo.count; data.applicantDetailsDisplay = workerInfo.applicantDetailsDisplay; this.currentAssignmentTechsData[item.id] = workerInfo.top10TechsFullData; return data; }
        async _fetchWorkerData(assignmentId, assignedTechName) { if (!assignmentId) return { count: 0, applicantDetailsDisplay: 'No ID', top10TechsFullData: [] }; const url = `/assignments/${assignmentId}/workers?start=0&limit=50&sortColumn=NEGOTIATION_CREATED_ON&sortDirection=DESC`; try { const response = await fetch(url, { headers: { 'Accept': 'application/json' } }); if (!response.ok) throw new Error(`API Error: ${response.status}`); const data = await response.json(); const appliedWorkers = (data.results || []).filter(w => w.declined_on === "" && w.has_negotiation === true && w.negotiation !== null); appliedWorkers.sort((a, b) => (a.distance || Infinity) - (b.distance || Infinity)); const top10TechsFullData = appliedWorkers.slice(0, 10).map(w => ({ ...w })); const listItems = top10TechsFullData.map((tech, index) => { let displayName = (tech.company_name && tech.company_name.toLowerCase() === 'sole proprietor') ? (tech.name || tech.company_name) : (tech.company_name || 'N/A'); const distance = (tech.distance !== undefined ? `${parseFloat(tech.distance).toFixed(1)} mi` : 'N/A'); const totalCostValue = tech.negotiation?.pricing?.total_cost; const totalCostDisplay = totalCostValue !== undefined ? `$${parseFloat(totalCostValue).toFixed(2)}` : 'N/A'; const costClass = totalCostValue ? 'cost-value' : 'cost-na'; let statusLabel = ''; if (assignedTechName && (tech.name === assignedTechName || tech.company_name === assignedTechName)) { statusLabel = `<strong class="applicant-status">(ASSIGNED)</strong>`; } return `<li class="applicant-item"><span class="applicant-name" data-assignment-id="${assignmentId}" data-tech-index="${index}">${displayName}</span><span class="applicant-id">(ID: ${tech.user_id})</span><span class="applicant-phone">${tech.mobile_phone || tech.work_phone || ''}</span><div class="applicant-details"><span>${distance} | Cost: <span class="${costClass}">${totalCostDisplay}</span></span>${statusLabel}</div></li>`; }); const applicantDetailsDisplay = top10TechsFullData.length > 0 ? `<ul class="applicant-list">${listItems.join('')}</ul>` : 'No applicants found'; return { count: appliedWorkers.length, applicantDetailsDisplay, top10TechsFullData }; } catch (error) { console.error(`${this.config.SCRIPT_PREFIX} Error fetching worker data for ${assignmentId}:`, error); return { count: 0, applicantDetailsDisplay: 'Fetch Error', top10TechsFullData: [] }; } }
        async _fetchAssignmentViewDetails(workNumber) { if (!workNumber) return null; if (this.currentAssignmentViewDataCache[workNumber]) return this.currentAssignmentViewDataCache[workNumber]; try { const response = await fetch('/v3/assignment/view', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ workNumber }) }); if (!response.ok) throw new Error(`API Error: ${response.status}`); const data = await response.json(); const payload = data.result?.payload?.[0] || null; if (payload) this.currentAssignmentViewDataCache[workNumber] = payload; return payload; } catch (error) { console.error(`${this.config.SCRIPT_PREFIX} Error fetching details for ${workNumber}:`, error); return null; } }
        _parseFullDateFromMillis(millis) { if (!millis) return { date: '', time: '', timestamp: 0 }; const d = new Date(millis); if (isNaN(d.getTime())) { return { date: '', time: '', timestamp: 0 }; } return { timestamp: millis, date: d.getFullYear() + '-' + ('0' + (d.getMonth() + 1)).slice(-2) + '-' + ('0' + d.getDate()).slice(-2), time: d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) }; }
        _updateSortIndicators() { const table = this.mainOverlay.querySelector('.custom-sortable-table'); if (!table) return; table.querySelectorAll('thead th .sort-arrow').forEach(arrow => arrow.className = 'sort-arrow'); const activeThArrow = table.querySelector(`thead th[data-column="${this.currentSort.column}"] .sort-arrow`); if (activeThArrow) activeThArrow.classList.add(this.currentSort.direction); }
        _showPrevTech() { if (this.currentModalTechIndex > 0) { this.currentModalTechIndex--; this._showTechDetailsModal(this.currentAssignmentTechsData[this.currentAssignmentId][this.currentModalTechIndex], this.currentAssignmentId, this.currentModalTechIndex); } }
        _showNextTech() { const techs = this.currentAssignmentTechsData[this.currentAssignmentId]; if (techs && this.currentModalTechIndex < techs.length - 1) { this.currentModalTechIndex++; this._showTechDetailsModal(techs[this.currentModalTechIndex], this.currentAssignmentId, this.currentModalTechIndex); } }
        _showPrevAssignment() { if (this.currentModalAssignmentIndex > 0) this._showAssignmentDetailsModal(this.currentModalAssignmentIndex - 1); }
        _showNextAssignment() { if (this.currentModalAssignmentIndex < this.displayedTableData.length - 1) this._showAssignmentDetailsModal(this.currentModalAssignmentIndex + 1); }
        _showTechDetailsModal(techData, assignmentId, techIndex) { if (!techData) return; const modal = this._createTechModal(); this.currentAssignmentId = assignmentId; this.currentModalTechIndex = techIndex; const grid = modal.querySelector('#techModalDetailsGrid'); grid.innerHTML = '...Loading...'; modal.style.display = 'flex'; }
        async _showAssignmentDetailsModal(itemIndex) { this.currentModalAssignmentIndex = itemIndex; const assignment = this.displayedTableData[itemIndex]; if (!assignment) return; const modal = this._createAssignmentDetailsModal(); modal.style.display = 'flex'; const grid = modal.querySelector('#assignmentModalDetailsGrid'); grid.innerHTML = '<em>Loading...</em>'; const details = await this._fetchAssignmentViewDetails(assignment.assignmentId); if (!details) { grid.innerHTML = '<em>Could not fetch details.</em>'; return; } const createDtDd = (k, v) => `<dt>${k}:</dt><dd>${v}</dd>`; grid.innerHTML = Object.entries(details).map(([k,v]) => createDtDd(k, typeof v === 'object' ? JSON.stringify(v) : v)).join(''); }
        _copyJsonToClipboard() { const dataToCopy = this.displayedTableData; if (dataToCopy.length === 0) { alert("No data to copy (check filters)."); return; } const jsonString = JSON.stringify(dataToCopy, null, 2); navigator.clipboard.writeText(jsonString).then(() => { alert(`${dataToCopy.length} rows copied to clipboard as JSON.`); }).catch(err => { console.error('Failed to copy JSON: ', err); alert('Failed to copy JSON. See console for details.'); }); }
        _copyCsvToClipboard() { const csvString = this._generateCsvString(); if (!csvString) { alert("No data to copy (check filters)."); return; } navigator.clipboard.writeText(csvString).then(() => { alert(`${this.displayedTableData.length} rows copied to clipboard as CSV.`); }).catch(err => { console.error('Failed to copy CSV: ', err); alert('Failed to copy CSV. See console for details.'); }); }
        _generateCsvString() { const dataToExport = this.displayedTableData; if (dataToExport.length === 0) return null; const headers = this.config.TABLE_HEADERS.filter(h => h.key !== 'checkbox' && h.key !== 'descIcon' && h.key !== 'applicantDetailsDisplay').map(h => h.name); const rows = dataToExport.map(item => { return this.config.TABLE_HEADERS.filter(h => h.key !== 'checkbox' && h.key !== 'descIcon' && h.key !== 'applicantDetailsDisplay').map(h => { const value = item[h.key] || ''; return `"${String(value).replace(/"/g, '""')}"`; }).join(','); }); return [headers.join(','), ...rows].join('\r\n'); }
        exportDataToCsv() { const csvString = this._generateCsvString(); if (!csvString) { alert("No data to download (check filters)."); return; } const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' }); const link = document.createElement("a"); const url = URL.createObjectURL(blob); const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-'); link.setAttribute("href", url); link.setAttribute("download", `workmarket_assignments_export_${timestamp}.csv`); link.style.visibility = 'hidden'; document.body.appendChild(link); link.click(); document.body.removeChild(link); }
        _startDragOverlay(e) { if (e.target.closest('.overlay-controls')) return; this.isDraggingOverlay = true; this.overlayDragStartX = e.clientX - this.mainOverlay.offsetLeft; this.overlayDragStartY = e.clientY - this.mainOverlay.offsetTop; document.addEventListener('mousemove', this._boundDoDragOverlay = this._boundDoDragOverlay || this._doDragOverlay.bind(this)); document.addEventListener('mouseup', this._boundStopDragOverlay = this._boundStopDragOverlay || this._stopDragOverlay.bind(this)); }
        _doDragOverlay(e) { if (!this.isDraggingOverlay) return; this.mainOverlay.style.left = (e.clientX - this.overlayDragStartX) + 'px'; this.mainOverlay.style.top = (e.clientY - this.overlayDragStartY) + 'px'; }
        _stopDragOverlay() { this.isDraggingOverlay = false; document.removeEventListener('mousemove', this._boundDoDragOverlay); document.removeEventListener('mouseup', this._boundStopDragOverlay); }
        _startResizeOverlay(e) { this.isResizingOverlay = true; this.overlayDragStartX = e.clientX; this.overlayDragStartY = e.clientY; this.overlayOriginalWidth = this.mainOverlay.offsetWidth; this.overlayOriginalHeight = this.mainOverlay.offsetHeight; document.addEventListener('mousemove', this._boundDoResizeOverlay = this._boundDoResizeOverlay || this._doResizeOverlay.bind(this)); document.addEventListener('mouseup', this._boundStopResizeOverlay = this._boundStopResizeOverlay || this._stopResizeOverlay.bind(this)); }
        _doResizeOverlay(e) { if (!this.isResizingOverlay) return; const newWidth = this.overlayOriginalWidth + (e.clientX - this.overlayDragStartX); const newHeight = this.overlayOriginalHeight + (e.clientY - this.overlayDragStartY); this.mainOverlay.style.width = Math.max(400, newWidth) + 'px'; this.mainOverlay.style.height = Math.max(200, newHeight) + 'px'; }
        _stopResizeOverlay() { this.isResizingOverlay = false; document.removeEventListener('mousemove', this._boundDoResizeOverlay); document.removeEventListener('mouseup', this._boundStopResizeOverlay); }
        _toggleMaximizeOverlay() { if (this.mainOverlay.classList.toggle('maximized-true')) { this.overlayPreMaximizeDimensions = { width: this.mainOverlay.style.width, height: this.mainOverlay.style.height, top: this.mainOverlay.style.top, left: this.mainOverlay.style.left, }; } else { this.mainOverlay.style.width = this.overlayPreMaximizeDimensions.width; this.mainOverlay.style.height = this.overlayPreMaximizeDimensions.height; this.mainOverlay.style.top = this.overlayPreMaximizeDimensions.top; this.mainOverlay.style.left = this.overlayPreMaximizeDimensions.left; } }
    }

    if (!window.WorkMarketTransformerInstance) {
        window.WorkMarketTransformerInstance = new WorkMarketTransformer();
    }
})();
